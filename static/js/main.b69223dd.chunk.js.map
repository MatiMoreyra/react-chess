{"version":3,"sources":["serviceWorker.ts","game-engine/IPiece.ts","components/game-view/PieceFrame.tsx","components/game-view/SquareFrame.tsx","game-engine/ChessGameEngine.ts","components/game-view/BoardView.tsx","components/utils/Centered.tsx","components/status-panel/Controls.tsx","components/status-panel/PanelHeader.tsx","components/status-panel/TurnIndicator.tsx","components/status-panel/CapturedPieceCounter.tsx","components/status-panel/CapturedPieces.tsx","components/status-panel/HistoryView.tsx","components/status-panel/StatusPanel.tsx","components/GameEndedModal.tsx","components/ChessGame.tsx","game-engine/local-engine/FenParser.ts","game-engine/local-engine/RulesPipeline.ts","game-engine/local-engine/GameState.ts","game-engine/local-engine/extensions/Board.ts","game-engine/local-engine/Rule.ts","game-engine/local-engine/rules/TurnsRule.ts","game-engine/local-engine/extensions/Piece.ts","game-engine/local-engine/rules/KingMovementRule.ts","game-engine/local-engine/rules/PawnShortMovementRule.ts","game-engine/local-engine/rules/PawnLongMovementRule.ts","game-engine/local-engine/rules/PawnCaptureMovementRule.ts","game-engine/local-engine/rules/KnightMovementRule.ts","game-engine/local-engine/rules/BishopMovementRule.ts","game-engine/local-engine/rules/RookMovementRule.ts","game-engine/local-engine/rules/QueenMovementRule.ts","game-engine/local-engine/extensions/Square.ts","game-engine/local-engine/extensions/Move.ts","game-engine/local-engine/rules/EnPassantRule.ts","game-engine/local-engine/rules/CheckRule.ts","game-engine/local-engine/rules/GameEndedRule.ts","game-engine/local-engine/LocalEngine.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","PieceColor","PieceType","style","height","width","border","pieceImage","piece","color","Black","type","toLowerCase","PieceFrame","props","src","alt","GameResult","squareStyle","float","padding","SquareFrame","background","onClick","boardStyle","borderRadius","overflow","boxShadow","BoardView","result","Array","row","col","bg","undefined","highlightedSquares","find","s","column","push","board","pieces","onSquareClick","key","toString","ChessGameEngine","onGameEnded","centeredStyle","margin","position","top","left","msTransform","transform","Centered","children","panelStyle","display","justifyContent","buttonStyle","Controls","Button","onUndo","onRestart","borderColor","borderBottomStyle","borderTopStyle","borderWidth","fontWeight","PanelHeader","text","indicatorStyle","textAlign","TurnIndicator","White","pieceStyle","marginRight","CapturedPieceCounter","i","count","Row","maxHeight","overflowY","overflowX","CapturedPieces","counters","forEach","p","counter","c","countPieces","whitePieces","blackPieces","Col","xs","paddingLeft","squareLabel","square","String","fromCharCode","charCodeAt","moveLabel","move","source","destination","HistoryView","history","length","minWidth","flexDirection","StatusPanel","currentTurn","capturedPieces","marginBottom","flexShrink","GameEndedModal","message","Draw","Modal","show","Open","onHide","Header","closeButton","Title","Body","Footer","variant","gameStyle","backgroundImage","ChessGame","handleUndo","engine","undoMove","setState","sourceSquare","handleRestart","restart","handleSquareClick","console","log","state","getChessBoard","isValidMove","handleGameEnded","gameResult","squares","this","bsPrefix","Container","getHistory","whoPlays","getCapturedPieces","React","Component","charToPiece","char","King","Queen","Rook","Bishop","Knight","Pawn","RulesPipeline","_firstRule","rule","last","next","evaluate","valid","GameState","onCheck","clonedBoard","clone","clonedHistory","m","clonedCapturedPieces","Board","getPiece","setPiece","isDiagonal","isVertical","isHorizontal","advance","Math","abs","dx","dy","sign","Rule","TurnsRule","movingPiece","nextOrInvalidResult","nextState","Piece","KingMovementRule","pieceAtDestination","PawnShortMovementRule","validDy","PawnLongMovementRule","validSourceRow","validDestinationRow","isPathFree","PawnCaptureMovementRule","KnightMovementRule","BishopMovementRule","RookMovementRule","QueenMovementRule","Square","Move","equals","EnPassantRule","frontSquare","backSquare","pieceBehind","lastMove","CheckRule","isChecked","nextTurn","kingSquare","GameEndedRule","evaluation","sRow","sColumn","dRow","dColumn","CheckMate","LocalEngine","_state","_pipeline","_stateHisory","fen","fill","rows","split","charAt","parseInt","parseFen","Error","setupRulesPipeline","lastState","pop","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b69223dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum PieceColor {\n  Black,\n  White\n}\n\nexport enum PieceType {\n  King = \"King\",\n  Queen = \"Queen\",\n  Rook = \"Rook\",\n  Bishop = \"Bishop\",\n  Knight = \"Knight\",\n  Pawn = \"Pawn\"\n}\n\nexport interface IPiece {\n  readonly color: PieceColor;\n  readonly type: PieceType;\n}\n","import React from \"react\";\nimport { IPiece, PieceColor } from \"../../game-engine/IPiece\";\n\ninterface PieceProps {\n  piece: IPiece | null;\n}\n\nconst style: React.CSSProperties = {\n  height: \"80%\",\n  width: \"80%\",\n  border: \"none\"\n};\n\nfunction pieceImage(piece: IPiece | null): string {\n  if (piece === null) {\n    return \"\";\n  }\n\n  let color = \"\";\n  if (piece.color === PieceColor.Black) {\n    color = \"black\";\n  } else {\n    color = \"white\";\n  }\n\n  let name = piece.type.toLowerCase();\n\n  return \"pieces/\" + name + \"-\" + color + \".png\";\n}\n\nexport const PieceFrame: React.FC<PieceProps> = props => {\n  if (props.piece == null) {\n    return <div></div>;\n  }\n  return <img src={pieceImage(props.piece)} alt={\"\"} style={style}></img>;\n};\n","import React from \"react\";\nimport { IPiece } from \"../../game-engine/IPiece\";\nimport { PieceFrame } from \"./PieceFrame\";\n\ninterface SquareProps {\n  piece: IPiece | null;\n  background: string;\n  onClick: () => void;\n}\n\nconst squareStyle: React.CSSProperties = {\n  height: \"12.5%\",\n  width: \"12.5%\",\n  float: \"left\",\n  border: \"none\",\n  padding: \"0\",\n};\n\nexport const SquareFrame: React.FC<SquareProps> = props => {\n  let style: React.CSSProperties = {\n    ...squareStyle,\n    background: props.background\n  };\n  return (\n    <button style={style} onClick={props.onClick}>\n      <PieceFrame piece={props.piece}></PieceFrame>\n    </button>\n  );\n};\n","import { IBoard } from \"./IBoard\";\nimport { PieceColor, IPiece } from \"./IPiece\";\nimport { IMove } from \"./IMove\";\n\nexport enum GameResult {\n  CheckMate = \"Checkmate\",\n  Draw = \"Draw\",\n  Open = \"Open\"\n}\n\nexport abstract class ChessGameEngine {\n  public abstract getChessBoard(): IBoard;\n  public abstract getHistory(): Array<IMove>;\n  public abstract getCapturedPieces(): Array<IPiece>;\n  public abstract move(move: IMove): boolean;\n  public abstract isValidMove(move: IMove): boolean;\n  public abstract whoPlays(): PieceColor;\n  public abstract undoMove(): void;\n  public abstract restart(): void;\n  public onGameEnded?: (result: GameResult) => void;\n}\n","import { IBoard } from \"../../game-engine/IBoard\";\nimport { SquareFrame } from \"./SquareFrame\";\nimport React, { ReactNode } from \"react\";\nimport { ISquare } from \"../../game-engine/ISquare\";\n\ninterface BoardProps {\n  board: IBoard;\n  onSquareClick: (col: number, row: number) => void;\n  highlightedSquares?: Array<ISquare>;\n}\n\nconst boardStyle: React.CSSProperties = {\n  height: \"80vmin\",\n  width: \"80vmin\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  overflow: \"hidden\",\n  boxShadow: \"5px 5px 5px rgba(0, 0, 0, 0.5)\"\n};\n\nconst darkSquareColor: string = \"#ab5e3a\";\nconst lightSquareColor: string = \"#ffddba\";\nconst highlightedSquareColor: string = \"#fff763\";\n\nexport const BoardView: React.FunctionComponent<BoardProps> = props => {\n  let result = new Array<ReactNode>();\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      let bg = (col + row) % 2 === 0 ? lightSquareColor : darkSquareColor;\n      if (props.highlightedSquares !== undefined) {\n        let square = props.highlightedSquares.find(\n          s => s.row === row && s.column === col\n        );\n        bg = square === undefined ? bg : highlightedSquareColor;\n      }\n      result.push(\n        <SquareFrame\n          piece={props.board.pieces[row][col]}\n          background={bg}\n          onClick={() => {\n            props.onSquareClick(row, col);\n          }}\n          key={row.toString() + col.toString()}\n        ></SquareFrame>\n      );\n    }\n  }\n  return <div style={boardStyle}>{result}</div>;\n};\n","import React from \"react\";\n\nconst centeredStyle: React.CSSProperties = {\n  margin: \"auto\",\n  position: \"relative\",\n  top: \"50%\",\n  left: \"50%\",\n  msTransform: \"translate(-50%, -50%)\",\n  transform: \"translate(-50%, -50%)\",\n}\n\nexport const Centered: React.FC<{}> = (props) => {\n  return (\n    <div style={centeredStyle}>\n      {props.children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\ninterface StatusPanelProps {\n  onUndo: () => void;\n  onRestart: () => void;\n}\n\nconst panelStyle: React.CSSProperties = {\n  width: \"100%\",\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  padding: \"10px\"\n};\n\nconst buttonStyle: React.CSSProperties = {\n  width: \"40%\",\n  boxShadow: \"1px 1px 1px rgba(0, 0, 0, 0.5)\"\n};\n\nexport const Controls: React.FunctionComponent<StatusPanelProps> = (props) => {\n  return (\n    <div style={panelStyle}>\n      <Button style={buttonStyle} onClick={props.onUndo}>Undo</Button>\n      <Button style={buttonStyle} onClick={props.onRestart}>Restart</Button>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface PanelHeadernelProps {\n  text: string;\n}\n\nconst panelStyle: React.CSSProperties = {\n  width: \"100%\",\n  borderColor: \"#b5b5b5\",\n  borderRadius: \"0px\",\n  borderBottomStyle: \"solid\",\n  borderTopStyle: \"solid\",\n  borderWidth: \"1px\",\n  padding: \"5px\",\n  overflow: \"hidden\",\n  background: \"#f8f8f8\",\n  fontWeight: \"bold\",\n  color: \"#626161\"\n};\n\nexport const PanelHeader: React.FunctionComponent<PanelHeadernelProps> = props => {\n  return <div style={panelStyle}>{props.text}</div>;\n};\n","import React from \"react\";\nimport { PieceColor } from \"../../game-engine/IPiece\";\n\ninterface TurnIndicatorProps {\n  color: PieceColor;\n}\n\nconst indicatorStyle: React.CSSProperties = {\n  width: \"100%\",\n  borderColor: \"#b5b5b5\",\n  borderRadius: \"0px\",\n  borderWidth: \"1px\",\n  padding: \"5px\",\n  overflow: \"hidden\",\n  background: \"Black\",\n  fontWeight: \"bold\",\n  color: \"#626161\",\n  textAlign: \"center\"\n};\n\nexport const TurnIndicator: React.FunctionComponent<TurnIndicatorProps> = props => {\n  let style = {...indicatorStyle};\n  let text: string;\n  if (props.color === PieceColor.White) {\n    text = \"White\";\n    style.background = \"white\";\n    style.color = \"#626161\";\n  } else {\n    text = \"Black\";\n    style.background = \"black\";\n    style.color = \"white\";\n  }\n  return <div style={style}>{text + \" plays\"}</div>;\n};\n","import React, { ReactNode } from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport { PieceFrame } from \"../game-view/PieceFrame\";\nimport { IPiece } from \"../../game-engine/IPiece\";\n\ninterface CapturedPieceCounter {\n  piece: IPiece;\n  count: number;\n}\n\nconst pieceStyle: React.CSSProperties = {\n  height: \"30px\",\n  width: \"30px\",\n  marginRight: \"-20px\"\n};\n\nexport const CapturedPieceCounter: React.FunctionComponent<CapturedPieceCounter> = props => {\n  let result = new Array<ReactNode>();\n  for (let i = 0; i < props.count; i++) {\n      result.push(\n        <div style={pieceStyle}>\n          <PieceFrame piece={props.piece}></PieceFrame>\n        </div>\n      );\n  }\n  return <Row>{result}</Row>;\n};\n","import React, { ReactNode } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { PieceColor, IPiece } from \"../../game-engine/IPiece\";\nimport { CapturedPieceCounter } from \"./CapturedPieceCounter\";\n\ninterface CapturedPiecesProps {\n  pieces: Array<IPiece>;\n}\n\nconst panelStyle: React.CSSProperties = {\n  width: \"100%\",\n  display: \"flex\",\n  maxHeight: \"100%\",\n  justifyContent: \"space-around\",\n  padding: \"5px\",\n  overflowY: \"scroll\",\n  overflowX: \"hidden\"\n};\n\ninterface PieceCounter {\n  piece: IPiece;\n  count: number;\n}\n\nfunction countPieces(pieces: Array<IPiece>): Array<PieceCounter> {\n  let counters = new Array<PieceCounter>();\n  pieces.forEach(p => {\n    let counter = counters.find(\n      c => c.piece.color === p.color && c.piece.type === p.type\n    );\n    if (!counter) {\n      counter = { piece: p, count: 0 };\n      counters.push(counter);\n    }\n    counter.count++;\n  });\n  return counters;\n}\n\nexport const CapturedPieces: React.FunctionComponent<CapturedPiecesProps> = props => {\n  let counters = countPieces(props.pieces);\n  let whitePieces = new Array<ReactNode>();\n  let blackPieces = new Array<ReactNode>();\n  counters.forEach(c => {\n    if (c.piece.color === PieceColor.White) {\n      whitePieces.push(\n        <CapturedPieceCounter piece={c.piece} count={c.count} />\n      );\n    } else {\n      blackPieces.push(\n        <CapturedPieceCounter piece={c.piece} count={c.count} />\n      );\n    }\n  });\n  return (\n    <div style={panelStyle}>\n      <Col xs={6}>{whitePieces}</Col>\n      <Col xs={6}>{blackPieces}</Col>\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { IMove } from \"../../game-engine/IMove\";\nimport { ISquare } from \"../../game-engine/ISquare\";\n\ninterface HistoryViewProps {\n  history: Array<IMove>;\n}\n\nconst panelStyle: React.CSSProperties = {\n  width: \"100%\",\n  maxHeight: \"100%\",\n  padding: \"5px\",\n  paddingLeft: \"10px\",\n  overflowY: \"scroll\",\n  overflowX: \"hidden\"\n};\n\nfunction squareLabel(square: ISquare): string {\n  let column = String.fromCharCode(\"a\".charCodeAt(0) + square.column);\n  let row = String.fromCharCode(\"8\".charCodeAt(0) - square.row);\n  return column + row;\n}\n\nfunction moveLabel(move: IMove): string {\n  return squareLabel(move.source) + \" \" + squareLabel(move.destination);\n}\n\nexport const HistoryView: React.FunctionComponent<HistoryViewProps> = props => {\n  let result = new Array<ReactNode>();\n  for (let i = 0; i < props.history.length; i += 2) {\n    result.push(\n      <Row>\n        <Col xs={2}>{i / 2 + 1}</Col>\n        <Col>{moveLabel(props.history[i])}</Col>\n        <Col>\n          {i + 1 === props.history.length ? (\n            <div>...</div>\n          ) : (\n            moveLabel(props.history[i + 1])\n          )}\n        </Col>\n      </Row>\n    );\n  }\n  return <div style={panelStyle}>{result}</div>;\n};\n","import React from \"react\";\nimport { Controls } from \"./Controls\";\nimport { PanelHeader } from \"./PanelHeader\";\nimport { TurnIndicator } from \"./TurnIndicator\";\nimport { CapturedPieces } from \"./CapturedPieces\";\nimport { PieceColor, IPiece } from \"../../game-engine/IPiece\";\nimport { HistoryView } from \"./HistoryView\";\nimport { IMove } from \"../../game-engine/IMove\";\n\ninterface StatusPanelProps {\n  history: Array<IMove>;\n  currentTurn: PieceColor;\n  capturedPieces: Array<IPiece>;\n  onUndo: () => void;\n  onRestart: () => void;\n}\n\nconst panelStyle: React.CSSProperties = {\n  minWidth: \"15vw\",\n  height: \"100%\",\n  maxHeight: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  overflow: \"hidden\",\n  boxShadow: \"5px 5px 5px rgba(0, 0, 0, 0.5)\",\n  background: \"white\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-between\"\n};\n\nexport const StatusPanel: React.FunctionComponent<StatusPanelProps> = props => {\n  return (\n    <div style={panelStyle}>\n      <div>\n        <TurnIndicator color={props.currentTurn}></TurnIndicator>{\" \"}\n        <PanelHeader text=\"Captured Pieces\"></PanelHeader>\n      </div>\n      <CapturedPieces pieces={props.capturedPieces}></CapturedPieces>\n      <div>\n        <PanelHeader text=\"History\"></PanelHeader>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          marginBottom: \"auto\",\n          overflow: \"auto\",\n          flexShrink: 2\n        }}\n      >\n        <HistoryView history={props.history}></HistoryView>\n      </div>\n      <div>\n        <PanelHeader text=\"Controls\"></PanelHeader>\n        <Controls onUndo={props.onUndo} onRestart={props.onRestart}></Controls>\n      </div>\n    </div>\n  );\n};\n","import { GameResult } from \"../game-engine/ChessGameEngine\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { PieceColor } from \"../game-engine/IPiece\";\n\ninterface GameEndedModalProps {\n  currentTurn: PieceColor;\n  result: GameResult;\n  onHide: () => void;\n}\n\nexport const GameEndedModal: React.FunctionComponent<GameEndedModalProps> = props => {\n  let message: string;\n  if (props.result === GameResult.Draw) {\n    message = \"Game ended by draw.\";\n  } else {\n    if (props.currentTurn === PieceColor.White) {\n      message = \"Black won by checkmate.\";\n    } else {\n      message = \"White won by checkmate.\";\n    }\n  }\n  return (\n    <Modal show={props.result !== GameResult.Open} onHide={props.onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Game ended!</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{message}</Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"primary\"\n          onClick={props.onHide}\n        >\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n","import { BoardView } from \"./game-view/BoardView\";\nimport React from \"react\";\nimport { ChessGameEngine, GameResult } from \"../game-engine/ChessGameEngine\";\nimport { ISquare } from \"../game-engine/ISquare\";\nimport { Centered } from \"./utils/Centered\";\nimport { IMove } from \"../game-engine/IMove\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport { StatusPanel } from \"./status-panel/StatusPanel\";\nimport { GameEndedModal } from \"./GameEndedModal\";\n\ninterface ChessGameProps {\n  engine: ChessGameEngine;\n}\n\ninterface ChessGameState {\n  sourceSquare: ISquare | null;\n  gameResult: GameResult;\n}\n\nconst gameStyle: React.CSSProperties = {\n  backgroundImage: \"linear-gradient(-90deg, #643722, #bf9c77, #643722)\",\n  width: \"100vw\",\n  height: \"100vh\",\n  overflow: \"hidden\"\n};\n\nexport class ChessGame extends React.Component<ChessGameProps, ChessGameState> {\n  constructor(p: ChessGameProps) {\n    super(p);\n    p.engine.onGameEnded = this.handleGameEnded;\n    this.state = {\n      sourceSquare: null,\n      gameResult: GameResult.Open\n    };\n  }\n\n  render() {\n    let board = this.props.engine.getChessBoard();\n    return (\n      <div style={gameStyle}>\n        <Centered>\n          <Row\n            style={{ margin: \"10px\", height: \"80%\", maxHeight: \"80vh\" }}\n            bsPrefix={\"d-flex justify-content-center\"}\n          >\n            <Container bsPrefix={\"d-flex justify-content-center\"}>\n              <Col>\n                <BoardView\n                  board={board}\n                  onSquareClick={this.handleSquareClick}\n                  highlightedSquares={this.highlightedSquares()}\n                ></BoardView>\n              </Col>\n              <Col>\n                <StatusPanel\n                  history={this.props.engine.getHistory()}\n                  currentTurn={this.props.engine.whoPlays()}\n                  capturedPieces={this.props.engine.getCapturedPieces()}\n                  onUndo={this.handleUndo}\n                  onRestart={this.handleRestart}\n                ></StatusPanel>\n              </Col>\n            </Container>\n          </Row>\n        </Centered>\n        <GameEndedModal\n          result={this.state.gameResult}\n          currentTurn={this.props.engine.whoPlays()}\n          onHide={() => {\n            this.setState({ gameResult: GameResult.Open });\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleUndo = () => {\n    this.props.engine.undoMove();\n    this.setState({ sourceSquare: null });\n  };\n\n  private handleRestart = () => {\n    this.props.engine.restart();\n    this.setState({ sourceSquare: null });\n  };\n\n  private handleSquareClick = (row: number, col: number) => {\n    console.log(row + \",\" + col + \" clicked\");\n    if (this.state.sourceSquare == null) {\n      if (this.props.engine.getChessBoard().pieces[row][col] != null) {\n        this.setState({ sourceSquare: { row: row, column: col } });\n      }\n    } else {\n      let move: IMove = {\n        source: this.state.sourceSquare,\n        destination: { row: row, column: col }\n      };\n      if (this.props.engine.isValidMove(move)) {\n        this.props.engine.move(move);\n      }\n      this.setState({ sourceSquare: null });\n    }\n  };\n\n  private handleGameEnded = (result: GameResult) => {\n    this.setState({ gameResult: result });\n  };\n\n  private highlightedSquares = () => {\n    let squares = new Array<ISquare>();\n    if (this.state.sourceSquare != null) {\n      squares.push(this.state.sourceSquare);\n    }\n    return squares;\n  };\n}\n","import { IPiece, PieceType, PieceColor } from \"../IPiece\";\n\nfunction charToPiece(char: string): IPiece | null {\n  switch (char) {\n    case \"k\":\n      return { type: PieceType.King, color: PieceColor.Black };\n    case \"q\":\n      return { type: PieceType.Queen, color: PieceColor.Black };\n    case \"r\":\n      return { type: PieceType.Rook, color: PieceColor.Black };\n    case \"b\":\n      return { type: PieceType.Bishop, color: PieceColor.Black };\n    case \"n\":\n      return { type: PieceType.Knight, color: PieceColor.Black };\n    case \"p\":\n      return { type: PieceType.Pawn, color: PieceColor.Black };\n    case \"K\":\n      return { type: PieceType.King, color: PieceColor.White };\n    case \"Q\":\n      return { type: PieceType.Queen, color: PieceColor.White };\n    case \"R\":\n      return { type: PieceType.Rook, color: PieceColor.White };\n    case \"B\":\n      return { type: PieceType.Bishop, color: PieceColor.White };\n    case \"N\":\n      return { type: PieceType.Knight, color: PieceColor.White };\n    case \"P\":\n      return { type: PieceType.Pawn, color: PieceColor.White };\n    default:\n      return null;\n  }\n}\n\nexport function parseFen(fen: string): Array<Array<IPiece | null>> | null {\n  // Create a matrix of pieces filled with null.\n  let pieces = new Array<Array<IPiece | null>>(8);\n  for (let row = 0; row < 8; row++) {\n    pieces[row] = new Array<IPiece | null>(8).fill(null);\n  }\n\n  let rows = fen.split(\"/\");\n  if (rows.length !== 8) {\n    return null;\n  }\n\n  for (var row = 0; row < 8; row++) {\n    let col = 0;\n    for (var i = 0; i < rows[row].length; i++) {\n      let char = rows[row].charAt(i);\n      // Check if char is a number between 0 and 8\n      if (char >= \"0\" && char <= \"8\") {\n        let n = parseInt(char, 10);\n        // Skip n columns\n        col += n;\n        if (col > 8) {\n          return null;\n        }\n        continue;\n      }\n\n      // Check if char is a valid piece\n      let piece = charToPiece(char);\n      if (piece != null) {\n        pieces[row][col] = piece;\n      } else {\n        return null;\n      }\n      col++;\n    }\n  }\n\n  return pieces;\n}\n","import { Rule, RuleEvaluationResult } from \"./Rule\";\nimport { GameState } from \"./GameState\";\nimport { Move } from \"./extensions/Move\";\n\nexport class RulesPipeline {\n  private _firstRule?: Rule;\n\n  public push(rule: Rule): void {\n    if (this._firstRule === undefined) {\n      this._firstRule = rule;\n    } else {\n      // Find the last one and append the incoming rule\n      let last = this._firstRule;\n      while (last.next !== undefined) {\n        last = last.next;\n      }\n      last.next = rule;\n    }\n  }\n\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    if (this._firstRule !== undefined) {\n      return this._firstRule.evaluate(move, state);\n    }\n    return { valid: false };\n  }\n}\n","import { PieceColor } from \"../IPiece\";\nimport { Board } from \"./extensions/Board\";\nimport { Move } from \"./extensions/Move\";\nimport { Piece } from \"./extensions/Piece\";\nimport { GameResult } from \"../ChessGameEngine\";\n\nexport class GameState {\n  public board: Board;\n  public currentTurn: PieceColor;\n  public history: Array<Move>;\n  public capturedPieces: Array<Piece>;\n  public onCheck: boolean;\n  public result: GameResult;\n\n  constructor(\n    board: Board,\n    currentTurn: PieceColor,\n    history: Array<Move>,\n    capturedPieces: Array<Piece>,\n    onCheck: boolean,\n    result: GameResult\n  ) {\n    this.board = board;\n    this.currentTurn = currentTurn;\n    this.history = history;\n    this.capturedPieces = capturedPieces;\n    this.onCheck = onCheck;\n    this.result = result;\n  }\n\n  // Deep copy\n  public clone(): GameState {\n    let clonedBoard = this.board.clone();\n    let clonedHistory = new Array<Move>();\n    this.history.forEach(m => {\n      clonedHistory.push(m);\n    });\n    let clonedCapturedPieces = new Array<Piece>();\n    this.capturedPieces.forEach(p => {\n      clonedCapturedPieces.push(p.clone());\n    });\n    return new GameState(\n      clonedBoard,\n      this.currentTurn,\n      clonedHistory,\n      clonedCapturedPieces,\n      this.onCheck,\n      this.result\n    );\n  }\n}\n","import { IBoard } from \"../../IBoard\";\nimport { IPiece } from \"../../IPiece\";\nimport { ISquare } from \"../../ISquare\";\nimport { Move } from \"./Move\";\n\n// Class that provides extension methods to manipulate an IBoard\nexport class Board implements IBoard {\n  readonly pieces: Array<Array<IPiece | null>>;\n  constructor(board: IBoard) {\n    this.pieces = board.pieces;\n  }\n\n  public clone(): Board {\n    let pieces = new Array<Array<IPiece | null>>(8);\n\n    for (let row = 0; row < 8; row++) {\n      pieces[row] = new Array<IPiece | null>(8);\n      for (let column = 0; column < 8; column++) {\n        pieces[row][column] = this.pieces[row][column];\n      }\n    }\n\n    return new Board({ pieces: pieces });\n  }\n\n  public getPiece(square: ISquare): IPiece | null {\n    return this.pieces[square.row][square.column];\n  }\n\n  public setPiece(square: ISquare, piece: IPiece | null) {\n    this.pieces[square.row][square.column] = piece;\n  }\n\n  /// Moves the piece at move.source to move.destination and sets\n  // the piece at move.source to null.\n  public move(move: Move) {\n    if (this.getPiece(move.source)) {\n      this.setPiece(move.destination, this.getPiece(move.source));\n      this.setPiece(move.source, null);\n    }\n  }\n\n  /// Returns true if all the squares from move.source trough move.destination\n  /// are empty, excluding source and destination squares.\n  /// If the move is not vertical, nor horizontal nor diagonal, returns false.\n  public isPathFree(move: Move): boolean {\n    if (!move.isDiagonal() && !move.isVertical() && !move.isHorizontal()) {\n      return false;\n    }\n\n    // Check if the path is clear\n    let advance = 1;\n    while (advance < Math.abs(move.dx) || advance < Math.abs(move.dy)) {\n      let col = move.source.column + advance * Math.sign(move.dx);\n      let row = move.source.row + advance * Math.sign(move.dy);\n      if (this.getPiece({ row: row, column: col }) !== null) {\n        return false;\n      }\n      advance++;\n    }\n\n    return true;\n  }\n}\n","import { GameState } from \"./GameState\";\nimport { Move } from \"./extensions/Move\";\n\nexport interface RuleEvaluationResult {\n  valid: boolean;\n  nextState?: GameState;\n}\n\n// A Rule is basically a function which validates or invalidates a Move given\n// a GameState.\n// These rules will be execute as a pipeline.\n// Each rule can perform operations before and after the evaluation of the next rule.\n// Example:\n//\n// This rule checks if the piece at the source square is not null.\n//\n// evaluate(move: Move, state: GameState): RuleEvaluationResult {\n//   // If the piece at source is null, return an invalid evaluation.\n//   // Returning before calling nextevaluate.(move, state) short-cirtuits the\n//   // pipeline.\n//   if (state.board[move.source.row][move.source.row]) {\n//     return {valid: false};\n//   }\n\n//   // If not null, just delegate the decision to the next rule or invalidate\n//   // the result if there isn't one.\n//   return next != undefined ? next.evaluate(move, state) : {valid: false};\n// }\n//\n\nexport abstract class Rule {\n  /// Reference of the next rule in the pipeline\n  public next?: Rule;\n  public abstract evaluate(move: Move, state: GameState): RuleEvaluationResult;\n\n  /// Helper method used to evaluate the next rule.\n  /// Returns { valid: false} if this.next is undefined;\n  protected nextOrInvalidResult(\n    move: Move,\n    state: GameState\n  ): RuleEvaluationResult {\n    return this.next ? this.next.evaluate(move, state) : { valid: false };\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor } from \"../../IPiece\";\n\nexport class TurnsRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not of the same color of the current turn\n    // jus return an invalid result.\n    if (movingPiece && movingPiece.color !== state.currentTurn) {\n      return { valid: false };\n    }\n\n    // If the color is valid, continue evaluating rules.\n    let result = this.nextOrInvalidResult(move, state);\n\n    // Now if the evaluation is valid change the current turn color.\n    if (result.valid && result.nextState) {\n      result.nextState.currentTurn =\n        result.nextState.currentTurn === PieceColor.White\n          ? PieceColor.Black\n          : PieceColor.White;\n    }\n\n    return result;\n  }\n}\n","import { IPiece, PieceColor, PieceType } from \"../../IPiece\";\n\n// Class that provides extension methods to manipulate an IPiece\nexport class Piece implements IPiece {\n  color: PieceColor;\n  type: PieceType;\n  constructor(piece: IPiece) {\n    this.color = piece.color;\n    this.type = piece.type;\n  }\n\n  public clone(): Piece {\n    return new Piece({ color: this.color, type: this.type });\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { PieceType } from \"../../IPiece\";\nimport { Move } from \"../extensions/Move\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class KingMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.King) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    // Cannot move if there is a piece of the same color at destination\n    let pieceAtDestination = state.board.getPiece(move.destination);\n    if (pieceAtDestination && pieceAtDestination.color === movingPiece.color) {\n      return { valid: false };\n    }\n\n    // Can move 1 square away in any direction\n    if (Math.abs(move.dx) <= 1 && Math.abs(move.dy) <= 1) {\n      let nextState = state.clone();\n      nextState.board.move(move);\n      nextState.history.push(move);\n      if (pieceAtDestination) {\n        nextState.capturedPieces.push(new Piece(pieceAtDestination));\n      }\n      return {\n        valid: true,\n        nextState: nextState\n      };\n    }\n\n    return this.nextOrInvalidResult(move, state);\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor, PieceType } from \"../../IPiece\";\n\nexport class PawnShortMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Pawn) {\n      return this.next ? this.next.evaluate(move, state) : { valid: false };\n    }\n\n    let validDy = 0;\n    switch (movingPiece.color) {\n      case PieceColor.White:\n        validDy = -1; // From bottom to top\n        break;\n\n      case PieceColor.Black:\n        validDy = 1; // From top to bottom\n        break;\n    }\n\n    if (move.dy === validDy && Math.abs(move.dx) === 0) {\n      // Can move if the destination square is empty.\n      let pieceAtDestination = state.board.getPiece(move.destination);\n      if (pieceAtDestination === null) {\n        let nextState = state.clone();\n        nextState.board.move(move);\n        nextState.history.push(move);\n        return {\n          valid: true,\n          nextState: nextState\n        };\n      }\n    }\n\n    // Just evaluate other pawn movement rules.\n    return this.nextOrInvalidResult(move, state);\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor, PieceType } from \"../../IPiece\";\n\nexport class PawnLongMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Pawn) {\n      return this.next ? this.next.evaluate(move, state) : { valid: false };\n    }\n\n    let validSourceRow = 0;\n    let validDestinationRow = 0;\n    switch (movingPiece.color) {\n      // White pawns can make moves from column 6 to 4\n      case PieceColor.White:\n        validSourceRow = 6;\n        validDestinationRow = 4;\n        break;\n\n      // Black pawns can make moves from column 1 to 3\n      case PieceColor.Black:\n        validSourceRow = 1;\n        validDestinationRow = 3;\n        break;\n    }\n\n    if (\n      move.source.row === validSourceRow &&\n      move.destination.row === validDestinationRow &&\n      Math.abs(move.dx) === 0 &&\n      state.board.isPathFree(move) && // The path should be empty\n      !state.board.getPiece(move.destination) // Destination should be empty\n    ) {\n      let nextState = state.clone();\n      nextState.board.move(move);\n      nextState.history.push(move);\n      return {\n        valid: true,\n        nextState: nextState\n      };\n    }\n\n    // Just evaluate other pawn movement rules.\n    return this.nextOrInvalidResult(move, state);\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor, PieceType } from \"../../IPiece\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class PawnCaptureMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Pawn) {\n      return this.next ? this.next.evaluate(move, state) : { valid: false };\n    }\n\n    let validDy = 0;\n    switch (movingPiece.color) {\n      case PieceColor.White:\n        validDy = -1; // From bottom to top\n        break;\n\n      case PieceColor.Black:\n        validDy = 1; // From top to bottom\n        break;\n    }\n\n    if (move.dy === validDy && Math.abs(move.dx) === 1) {\n      // Can move if there is a piece of the oposite color at destination\n      let pieceAtDestination = state.board.getPiece(move.destination);\n      if (\n        pieceAtDestination &&\n        pieceAtDestination.color !== movingPiece.color\n      ) {\n        let nextState = state.clone();\n        nextState.board.move(move);\n        nextState.history.push(move);\n        nextState.capturedPieces.push(new Piece(pieceAtDestination));\n        return {\n          valid: true,\n          nextState: nextState\n        };\n      }\n    }\n\n    // Just evaluate other pawn movement rules.\n    return this.nextOrInvalidResult(move, state);\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceType } from \"../../IPiece\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class KnightMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Knight) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    // Cannot move if there is a piece of the same color at destination\n    let pieceAtDestination = state.board.getPiece(move.destination);\n    if (pieceAtDestination && pieceAtDestination.color === movingPiece.color) {\n      return { valid: false };\n    }\n\n    // Cool solution\n    if (Math.abs(move.dx * move.dy) === 2) {\n      let nextState = state.clone();\n      nextState.board.move(move);\n      nextState.history.push(move);\n      if (pieceAtDestination) {\n        nextState.capturedPieces.push(new Piece(pieceAtDestination));\n      }\n      return {\n        valid: true,\n        nextState: nextState\n      };\n    }\n\n    return { valid: false };\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { PieceType } from \"../../IPiece\";\nimport { Move } from \"../extensions/Move\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class BishopMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Bishop) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    // Diagonal movement means abs(dx) === abs(dy)\n    if (!move.isDiagonal()) {\n      return { valid: false };\n    }\n\n    // Check if the path is clear\n    if (!state.board.isPathFree(move)) {\n      return { valid: false };\n    }\n\n    // Cannot move if there is a piece of the same color at destination\n    let pieceAtDestination = state.board.getPiece(move.destination);\n    if (pieceAtDestination && pieceAtDestination.color === movingPiece.color) {\n      return { valid: false };\n    }\n\n    // Everything is fine, can move.\n    let nextState = state.clone();\n    nextState.board.move(move);\n    nextState.history.push(move);\n    if (pieceAtDestination) {\n      nextState.capturedPieces.push(new Piece(pieceAtDestination));\n    }\n    return {\n      valid: true,\n      nextState: nextState\n    };\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceType } from \"../../IPiece\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class RookMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Rook) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    // Cannot move if there is a piece of the same color at destination\n    let pieceAtDestination = state.board.getPiece(move.destination);\n    if (pieceAtDestination && pieceAtDestination.color === movingPiece.color) {\n      return { valid: false };\n    }\n\n    // Can move vertically or horizontally\n    if (!move.isVertical() && !move.isHorizontal()) {\n      return { valid: false };\n    }\n\n    // Check if the path is clear\n    if (!state.board.isPathFree(move)) {\n      return { valid: false };\n    }\n\n    // Everything is fine, can move.\n    let nextState = state.clone();\n    nextState.board.move(move);\n    nextState.history.push(move);\n    if (pieceAtDestination) {\n      nextState.capturedPieces.push(new Piece(pieceAtDestination));\n    }\n    return {\n      valid: true,\n      nextState: nextState\n    };\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceType } from \"../../IPiece\";\nimport { Piece } from \"../extensions/Piece\";\n\nexport class QueenMovementRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Queen) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    // Cannot move if there is a piece of the same color at destination\n    let pieceAtDestination = state.board.getPiece(move.destination);\n    if (pieceAtDestination && pieceAtDestination.color === movingPiece.color) {\n      return { valid: false };\n    }\n\n    if (!move.isDiagonal() && !move.isVertical() && !move.isHorizontal()) {\n      return { valid: false };\n    }\n\n    // Check if the path is clear\n    if (!state.board.isPathFree(move)) {\n      return { valid: false };\n    }\n\n    // Everything is fine, can move.\n    let nextState = state.clone();\n    nextState.board.move(move);\n    nextState.history.push(move);\n    if (pieceAtDestination) {\n      nextState.capturedPieces.push(new Piece(pieceAtDestination));\n    }\n    return {\n      valid: true,\n      nextState: nextState\n    };\n  }\n}\n","import { ISquare } from \"../../ISquare\";\n\n// Class that provides extension methods to manipulate an IMove\nexport class Square implements ISquare {\n  row: number;\n  column: number;\n  constructor(square: ISquare) {\n    this.row = square.row;\n    this.column = square.column;\n  }\n\n  public equals(square: ISquare): boolean {\n    return this.row === square.row && this.column === square.column;\n  }\n}\n","import { IMove } from \"../../IMove\";\nimport { Square } from \"./Square\";\n\n// Class that provides extension methods to manipulate an IMove\nexport class Move implements IMove {\n  source: Square;\n  destination: Square;\n  constructor(move: IMove) {\n    this.source = new Square(move.source);\n    this.destination = new Square(move.destination);\n  }\n\n  public get dx(): number {\n    return this.destination.column - this.source.column;\n  }\n\n  public get dy(): number {\n    return this.destination.row - this.source.row;\n  }\n\n  public isVertical(): boolean {\n    return this.dx === 0 && this.dy !== 0;\n  }\n\n  public isHorizontal(): boolean {\n    return this.dy === 0 && this.dx !== 0;\n  }\n\n  public isDiagonal(): boolean {\n    return Math.abs(this.dx) === Math.abs(this.dy) && this.dx !== 0;\n  }\n\n  public equals(move: Move) {\n    return (\n      this.source.equals(move.source) &&\n      this.destination.equals(move.destination)\n    );\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor, PieceType } from \"../../IPiece\";\nimport { Square } from \"../extensions/Square\";\n\nexport class EnPassantRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    let movingPiece = state.board.getPiece(move.source);\n\n    // If the moving piece is not a king, just delegate the evaluation to the\n    // next rule (if exists).\n    if (!movingPiece || movingPiece.type !== PieceType.Pawn) {\n      return this.nextOrInvalidResult(move, state);\n    }\n\n    let validDy = 0;\n    switch (movingPiece.color) {\n      case PieceColor.White:\n        validDy = -1; // From bottom to top\n        break;\n\n      case PieceColor.Black:\n        validDy = 1; // From top to bottom\n        break;\n    }\n\n    if (move.dy === validDy && Math.abs(move.dx) === 1) {\n      // Can move if the last move was a long pawn move at destination column\n      // from destination row + validDy to destination row - validDy.\n\n      let frontSquare = new Square({\n        column: move.destination.column,\n        row: move.destination.row + validDy\n      });\n      let backSquare = new Square({\n        column: move.destination.column,\n        row: move.destination.row - validDy\n      });\n      let pieceBehind = state.board.getPiece(backSquare);\n      let lastMove = state.history[state.history.length - 1];\n\n      if (\n        pieceBehind &&\n        pieceBehind.type === PieceType.Pawn && // Piece behind should be a pawn\n        pieceBehind.color !== movingPiece.color && // of the oposite color\n        // which did a long move in the last turn.\n        lastMove.equals(\n          new Move({ source: frontSquare, destination: backSquare })\n        )\n      ) {\n        let nextState = state.clone();\n        nextState.board.move(move);\n        nextState.history.push(move);\n        nextState.board.setPiece(backSquare, null);\n        return {\n          valid: true,\n          nextState: nextState\n        };\n      }\n    }\n\n    // Just evaluate other pawn movement rules.\n    return this.nextOrInvalidResult(move, state);\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { PieceColor, PieceType } from \"../../IPiece\";\nimport { Square } from \"../extensions/Square\";\nimport { ISquare } from \"../../ISquare\";\n\nexport class CheckRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    // Evaluate the chain of rules.\n    let result = this.nextOrInvalidResult(move, state);\n\n    if (result.valid && result.nextState) {\n      // Invalidate the move if the player who moved is on check after the move\n      if (this.isChecked(result.nextState, result.nextState.currentTurn)) {\n        return { valid: false };\n      }\n      let nextTurn =\n        state.currentTurn === PieceColor.White\n          ? PieceColor.Black\n          : PieceColor.White;\n\n      result.nextState.onCheck = this.isChecked(result.nextState, nextTurn);\n    }\n    return result;\n  }\n\n  private isChecked(state: GameState, color: PieceColor): boolean {\n    // First, find the king of the given color\n    let kingSquare;\n    for (let row = 0; row < 8; row++) {\n      for (let column = 0; column < 8; column++) {\n        let square: ISquare = { row: row, column: column };\n        let piece = state.board.getPiece({ row: row, column: column });\n        if (piece && piece.type === PieceType.King && piece.color === color) {\n          kingSquare = new Square(square);\n          break;\n        }\n      }\n    }\n\n    if (kingSquare === undefined) {\n      return false;\n    }\n\n    // Now check if any piece of the oposite color can move to the king square\n    for (let row = 0; row < 8; row++) {\n      for (let column = 0; column < 8; column++) {\n        let source: ISquare = { row: row, column: column };\n        let piece = state.board.getPiece(source);\n        if (piece && piece.color !== color) {\n          let move: Move = new Move({\n            source: source,\n            destination: kingSquare\n          });\n          let result = this.nextOrInvalidResult(move, state);\n          if (result.valid) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\n","import { Rule, RuleEvaluationResult } from \"../Rule\";\nimport { GameState } from \"../GameState\";\nimport { Move } from \"../extensions/Move\";\nimport { ISquare } from \"../../ISquare\";\nimport { GameResult } from \"../../ChessGameEngine\";\n\nexport class GameEndedRule extends Rule {\n  public evaluate(move: Move, state: GameState): RuleEvaluationResult {\n    // Evaluate all rules.\n    let evaluation = this.nextOrInvalidResult(move, state);\n\n    if (!evaluation.nextState) {\n      return evaluation;\n    }\n    if (!evaluation.valid) {\n      return evaluation;\n    }\n\n    // If the evaluation is valid, check if there are possible moves.\n    for (let sRow = 0; sRow < 8; sRow++) {\n      for (let sColumn = 0; sColumn < 8; sColumn++) {\n        let source: ISquare = { row: sRow, column: sColumn };\n        let piece = state.board.getPiece({ row: sRow, column: sColumn });\n        if (piece && piece.color === evaluation.nextState.currentTurn) {\n          for (let dRow = 0; dRow < 8; dRow++) {\n            for (let dColumn = 0; dColumn < 8; dColumn++) {\n              let dest: ISquare = { row: dRow, column: dColumn };\n              let move = new Move({ source: source, destination: dest });\n              if (this.nextOrInvalidResult(move, evaluation.nextState).valid) {\n                return evaluation;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    evaluation.nextState.result = evaluation.nextState.onCheck\n      ? GameResult.CheckMate\n      : GameResult.Draw;\n\n    return evaluation;\n  }\n}\n","import { PieceColor, IPiece } from \"../IPiece\";\nimport { IBoard } from \"../IBoard\";\nimport { parseFen } from \"./FenParser\";\nimport { ChessGameEngine, GameResult } from \"../ChessGameEngine\";\nimport { RulesPipeline } from \"./RulesPipeline\";\nimport { GameState } from \"./GameState\";\nimport { Board } from \"./extensions/Board\";\nimport { TurnsRule } from \"./rules/TurnsRule\";\nimport { KingMovementRule } from \"./rules/KingMovementRule\";\nimport { PawnShortMovementRule } from \"./rules/PawnShortMovementRule\";\nimport { PawnLongMovementRule } from \"./rules/PawnLongMovementRule\";\nimport { PawnCaptureMovementRule } from \"./rules/PawnCaptureMovementRule\";\nimport { KnightMovementRule } from \"./rules/KnightMovementRule\";\nimport { BishopMovementRule } from \"./rules/BishopMovementRule\";\nimport { RookMovementRule } from \"./rules/RookMovementRule\";\nimport { QueenMovementRule } from \"./rules/QueenMovementRule\";\nimport { IMove } from \"../IMove\";\nimport { Move } from \"./extensions/Move\";\nimport { EnPassantRule } from \"./rules/EnPassantRule\";\nimport { Piece } from \"./extensions/Piece\";\nimport { CheckRule } from \"./rules/CheckRule\";\nimport { GameEndedRule } from \"./rules/GameEndedRule\";\n\nexport class LocalEngine extends ChessGameEngine {\n  private _state: GameState;\n  private _pipeline: RulesPipeline;\n  private _stateHisory: Array<GameState>;\n  constructor() {\n    super();\n    let pieces = parseFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\");\n    if (pieces == null) {\n      throw new Error(\"Invalid fen\");\n    }\n    this._state = new GameState(\n      new Board({ pieces: pieces }),\n      PieceColor.White,\n      new Array<Move>(),\n      new Array<Piece>(),\n      false,\n      GameResult.Open\n    );\n    this._pipeline = new RulesPipeline();\n    this.setupRulesPipeline();\n    this._stateHisory = new Array<GameState>();\n  }\n\n  public getChessBoard(): IBoard {\n    return this._state.board;\n  }\n\n  public getHistory(): Array<IMove> {\n    return this._state.history;\n  }\n\n  public move(move: IMove): boolean {\n    let evaluation = this._pipeline.evaluate(new Move(move), this._state);\n    if (evaluation.valid && evaluation.nextState !== undefined) {\n      this._stateHisory.push(this._state);\n      this._state = evaluation.nextState;\n      if (this._state.result !== GameResult.Open) {\n        if (this.onGameEnded !== undefined) {\n          this.onGameEnded(this._state.result);\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public isValidMove(move: IMove): boolean {\n    return this._pipeline.evaluate(new Move(move), this._state).valid;\n  }\n\n  public whoPlays(): PieceColor {\n    return this._state.currentTurn;\n  }\n\n  public getCapturedPieces(): Array<IPiece> {\n    return this._state.capturedPieces;\n  }\n\n  public undoMove(): void {\n    let lastState = this._stateHisory.pop();\n    if (lastState) {\n      this._state = lastState;\n    }\n  }\n\n  public restart(): void {\n    if (this._stateHisory.length !== 0) {\n      this._state = this._stateHisory[0];\n      this._stateHisory = new Array<GameState>();\n    }\n  }\n\n  private setupRulesPipeline(): void {\n    this._pipeline.push(new GameEndedRule());\n    this._pipeline.push(new TurnsRule());\n    this._pipeline.push(new CheckRule());\n    this._pipeline.push(new KingMovementRule());\n    this._pipeline.push(new PawnShortMovementRule());\n    this._pipeline.push(new PawnLongMovementRule());\n    this._pipeline.push(new PawnCaptureMovementRule());\n    this._pipeline.push(new KnightMovementRule());\n    this._pipeline.push(new BishopMovementRule());\n    this._pipeline.push(new RookMovementRule());\n    this._pipeline.push(new QueenMovementRule());\n    this._pipeline.push(new EnPassantRule());\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { ChessGame } from './components/ChessGame';\nimport { LocalEngine } from './game-engine/local-engine/LocalEngine';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nlet engine = new LocalEngine();\n\nReactDOM.render(<ChessGame engine={engine} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}